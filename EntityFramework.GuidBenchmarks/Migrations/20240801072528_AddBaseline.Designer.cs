// <auto-generated />
using System;
using EntityFramework.GuidBenchmarks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EntityFramework.GuidBenchmarks.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240801072528_AddBaseline")]
    partial class AddBaseline
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EntityFramework.GuidBenchmarks.Entities.BaselineEventStream", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Events")
                        .IsRequired()
                        .HasColumnType("varchar(max)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("BaselineEventStreams");
                });

            modelBuilder.Entity("EntityFramework.GuidBenchmarks.Entities.EventStream", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Events")
                        .IsRequired()
                        .HasColumnType("varchar(max)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("EventStreams");
                });

            modelBuilder.Entity("EntityFramework.GuidBenchmarks.Entities.OrderedCompressedEventStream", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Events")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("OrderedCompressedEventStreams");
                });

            modelBuilder.Entity("EntityFramework.GuidBenchmarks.Entities.OrderedEventStream", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Events")
                        .IsRequired()
                        .HasColumnType("varchar(max)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("OrderedEventStreams");
                });

            modelBuilder.Entity("EntityFramework.GuidBenchmarks.Entities.SequentialCompressedEventStream", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Events")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("SequentialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SequentialId"));

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("Id");

                    b.HasIndex("SequentialId");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("SequentialId"));

                    b.ToTable("SequentialCompressedEventStreams");
                });

            modelBuilder.Entity("EntityFramework.GuidBenchmarks.Entities.SequentialEventStream", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Events")
                        .IsRequired()
                        .HasColumnType("varchar(max)");

                    b.Property<long>("SequentialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SequentialId"));

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("SequentialId");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("SequentialId"));

                    b.ToTable("SequentialEventStreams");
                });

            modelBuilder.Entity("EntityFramework.GuidBenchmarks.Entities.Statistics", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<double>("DurationSeconds")
                        .HasColumnType("float");

                    b.Property<string>("EntityType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Operation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Statistics");
                });
#pragma warning restore 612, 618
        }
    }
}
